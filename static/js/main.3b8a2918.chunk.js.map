{"version":3,"sources":["settings.ts","ConnectForm.tsx","Controller.tsx","client.ts","App.tsx","theme.ts","index.tsx"],"names":["KEY","ConnectForm","onSubmit","React","useState","localStorage","getItem","value","setValue","handleSubmit","e","preventDefault","Input","onChange","target","Button","type","Controller","deviceId","Box","Slider","max","onChangeCommitted","_e","newValue","Client","onOpen","socket","freq","pulse","this","WebSocket","path","onmessage","ev","redirect","JSON","parse","data","ws","console","info","close","onopen","setPwm","window","onunload","send","stringify","pwm0","io","updateDisplay","display","clear","text","App","setDeviceId","client","setClient","isConnected","setConnected","Container","maxWidth","v","setPulse","CircularProgress","setItem","removeItem","settings","connect","theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"oOAAMA,EAAM,WCOCC,EAAc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAsB,EACxBC,IAAMC,SDNDC,aAAaC,QAAQN,ICKF,mBAC3CO,EAD2C,KACpCC,EADoC,KAE5CC,EAAe,WACnBF,GAASL,EAASK,IAGpB,OACE,uBACEL,SAAU,SAACQ,GACTA,EAAEC,iBACFF,KAHJ,UAME,cAACG,EAAA,EAAD,CACEL,MAAOA,GAAS,GAChBM,SAAU,SAACH,GAAD,OAAOF,EAASE,EAAEI,OAAOP,UAErC,cAACQ,EAAA,EAAD,CAAQC,KAAK,SAAb,yB,gBChBOC,EAAa,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUL,EAAsB,EAAtBA,SAAsB,EACjCV,IAAMC,SAAS,GADkB,mBACpDG,EADoD,KAC7CC,EAD6C,KAE3D,OAAKU,EAEH,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEb,MAAOA,EACPc,IAAK,IACLC,kBAAmB,kBAAMT,EAASN,IAClCM,SAAU,SAACU,EAAIC,GAAL,OAAkBhB,EAASgB,QAPrB,M,gBCVXC,EAAb,WAME,WAAYP,GAAmB,yBAL/BA,cAK8B,OAJ9BQ,YAI8B,OAHtBC,OAA2B,KAGL,KAFtBC,KAAe,GAEO,KADtBC,MAAgB,EAEtBC,KAAKZ,SAAWA,EAPpB,sDAYa,IAAD,OACRY,KAAKH,OAAS,IAAII,UAAJ,0BAAiCD,KAAKE,OACpDF,KAAKH,OAAOM,UAAY,SAACC,GAAQ,IAAD,EAEtBC,EADKC,KAAKC,MAAMH,EAAGI,MACD,GAAGC,GAArBJ,SACRK,QAAQC,KAAKN,GACb,YAAKR,cAAL,SAAae,QACb,EAAKf,OAAS,IAAII,UAAJ,UAAiBI,EAAjB,YAA6B,EAAKH,OAChD,EAAKL,OAAOgB,OAAS,WACnB,EAAKjB,QAAU,EAAKA,SACpB,EAAKkB,UAEPC,OAAOC,SAAW,WAAO,IAAD,EACtB,YAAKnB,cAAL,SAAae,YAzBrB,6BA8BI,GAAKZ,KAAKH,OAAV,CADiB,2BAAXW,EAAW,yBAAXA,EAAW,gBAEjBR,KAAKH,OAAOoB,KAAKX,KAAKY,UAAUV,OA/BpC,+BAkCIR,KAAKiB,KAAK,CACRE,KAAM,CACJC,GAAI,EACJtB,KAAME,KAAKF,QAGfE,KAAKqB,kBAxCT,sCA2CIrB,KAAKiB,KAAK,CACRK,QAAS,CACPC,OAAO,EACPC,KAAK,SAAD,OAAWxB,KAAKF,KAAhB,oBAAgCE,KAAKD,YA9CjD,+BAkDWA,GACPC,KAAKD,MAAQA,EACbC,KAAKiB,KAAK,CACRE,KAAM,CAAEpB,WAEVC,KAAKqB,kBAvDT,8BAyDUvB,GACNE,KAAKF,KAAOA,EACZE,KAAKiB,KAAK,CACRE,KAAM,CAAErB,UAEVE,KAAKqB,kBA9DT,2BAUI,MAAM,SAAN,OAAgBrB,KAAKZ,SAArB,aAVJ,KCOaqC,EAAM,WAAO,IAAD,EACSpD,IAAMC,SAAS,IADxB,mBAChBc,EADgB,KACNsC,EADM,OAEKrD,IAAMC,SAAwB,MAFnC,mBAEhBqD,EAFgB,KAERC,EAFQ,OAGavD,IAAMC,UAAS,GAH5B,mBAGhBuD,EAHgB,KAGHC,EAHG,KAcvB,OACE,cAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,SACG5C,EACCyC,EACE,cAAC,EAAD,CACEzC,SAAUA,EACVL,SAAU,SAACkD,GAAD,cAAON,QAAP,IAAOA,OAAP,EAAOA,EAAQO,SAASD,MAGpC,cAACE,EAAA,EAAD,IAGF,cAAC,EAAD,CAAa/D,SAtBE,SAACK,GACpBiD,EAAYjD,GJTW,SAACA,GAC1BA,EACIF,aAAa6D,QAAQlE,EAAKO,GAC1BF,aAAa8D,WAAWnE,GIO1BoE,CAAqB7D,GACrB,IAAMkD,EAAS,IAAIhC,EAAOlB,GAC1BkD,EAAO/B,OAAS,WACdkC,GAAa,IAEfH,EAAOY,UACPX,EAAUD,S,yBCECa,EAjBDC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERE,MAAO,CACLF,KAAMG,IAAIC,MAEZC,WAAY,CACVC,QAAS,WCTfC,IAASC,OACP,eAACC,EAAA,EAAD,CAAeb,MAAOA,EAAtB,UAEE,cAACc,EAAA,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,cAAc,Y","file":"static/js/main.3b8a2918.chunk.js","sourcesContent":["const KEY = 'deviceId';\n\nexport const getDeviceId = () => localStorage.getItem(KEY);\nexport const setDeviceId = (value: string | null) =>\n  value\n    ? localStorage.setItem(KEY, value)\n    : localStorage.removeItem(KEY);\n","import { Button, Input } from '@material-ui/core';\nimport React from 'react';\nimport { getDeviceId } from './settings';\n\ninterface Props {\n  onSubmit: (value: string) => void;\n}\nexport const ConnectForm = ({ onSubmit }: Props) => {\n  const [value, setValue] = React.useState(getDeviceId());\n  const handleSubmit = () => {\n    value && onSubmit(value);\n    return;\n  };\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        handleSubmit();\n      }}\n    >\n      <Input\n        value={value || ''}\n        onChange={(e) => setValue(e.target.value)}\n      />\n      <Button type=\"submit\">Connect</Button>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Box, Slider } from '@material-ui/core';\n\ninterface Props {\n  deviceId: string;\n  onChange: (value: number) => void;\n}\n\nexport const Controller = ({ deviceId, onChange }: Props) => {\n  const [value, setValue] = React.useState(0);\n  if (!deviceId) return null;\n  return (\n    <Box>\n      <Slider\n        value={value}\n        max={1000}\n        onChangeCommitted={() => onChange(value)}\n        onChange={(_e, newValue) => setValue(newValue as number)}\n      />\n    </Box>\n  );\n};\n","export class Client {\n  deviceId: string;\n  onOpen?: () => void;\n  private socket: WebSocket | null = null;\n  private freq: number = 20;\n  private pulse: number = 0;\n  constructor(deviceId: string) {\n    this.deviceId = deviceId;\n  }\n  get path(): string {\n    return `obniz/${this.deviceId}/ws/1`;\n  }\n  connect() {\n    this.socket = new WebSocket(`wss://obniz.com/${this.path}`);\n    this.socket.onmessage = (ev) => {\n      const data = JSON.parse(ev.data);\n      const { redirect } = data[0].ws;\n      console.info(redirect);\n      this.socket?.close();\n      this.socket = new WebSocket(`${redirect}/${this.path}`);\n      this.socket.onopen = () => {\n        this.onOpen && this.onOpen();\n        this.setPwm();\n      };\n      window.onunload = () => {\n        this.socket?.close();\n      };\n    };\n  }\n  send(...data: any) {\n    if (!this.socket) return;\n    this.socket.send(JSON.stringify(data));\n  }\n  setPwm() {\n    this.send({\n      pwm0: {\n        io: 0,\n        freq: this.freq,\n      },\n    });\n    this.updateDisplay();\n  }\n  updateDisplay() {\n    this.send({\n      display: {\n        clear: true,\n        text: `Freq: ${this.freq}\\nPluse: ${this.pulse}`,\n      },\n    });\n  }\n  setPulse(pulse: number) {\n    this.pulse = pulse;\n    this.send({\n      pwm0: { pulse },\n    });\n    this.updateDisplay();\n  }\n  setFreq(freq: number) {\n    this.freq = freq;\n    this.send({\n      pwm0: { freq },\n    });\n    this.updateDisplay();\n  }\n}\n","import React from 'react';\nimport { CircularProgress, Container } from '@material-ui/core';\nimport { ConnectForm } from './ConnectForm';\nimport { Controller } from './Controller';\nimport * as settings from './settings';\nimport { Client } from './client';\n\nexport const App = () => {\n  const [deviceId, setDeviceId] = React.useState('');\n  const [client, setClient] = React.useState<Client | null>(null);\n  const [isConnected, setConnected] = React.useState(false);\n  const handleSubmit = (value: string) => {\n    setDeviceId(value);\n    settings.setDeviceId(value);\n    const client = new Client(value);\n    client.onOpen = () => {\n      setConnected(true);\n    };\n    client.connect();\n    setClient(client);\n  };\n  return (\n    <Container maxWidth=\"sm\">\n      {deviceId ? (\n        isConnected ? (\n          <Controller\n            deviceId={deviceId}\n            onChange={(v) => client?.setPulse(v)}\n          />\n        ) : (\n          <CircularProgress />\n        )\n      ) : (\n        <ConnectForm onSubmit={handleSubmit} />\n      )}\n    </Container>\n  );\n};\n","import red from '@material-ui/core/colors/red';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { App } from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}